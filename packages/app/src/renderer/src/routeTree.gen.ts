/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as EntertainmentImport } from './routes/entertainment'
import { Route as IndexImport } from './routes/index'
import { Route as NotesIndexImport } from './routes/notes/index'
import { Route as SystemBrowsersImport } from './routes/system/browsers'
import { Route as SettingsSecurityImport } from './routes/settings/security'
import { Route as SettingsGeneralImport } from './routes/settings/general'
import { Route as SettingsConnectionsImport } from './routes/settings/connections'
import { Route as PoliciesTermsImport } from './routes/policies/terms'
import { Route as PoliciesPrivacyImport } from './routes/policies/privacy'
import { Route as PoliciesFaqImport } from './routes/policies/faq'
import { Route as EntertainmentMangaImport } from './routes/entertainment/manga'
import { Route as EntertainmentMangaIndexImport } from './routes/entertainment/manga/index'
import { Route as EntertainmentMangaIdImport } from './routes/entertainment/manga/$id'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const EntertainmentRoute = EntertainmentImport.update({
  id: '/entertainment',
  path: '/entertainment',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NotesIndexRoute = NotesIndexImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => rootRoute,
} as any)

const SystemBrowsersRoute = SystemBrowsersImport.update({
  id: '/system/browsers',
  path: '/system/browsers',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSecurityRoute = SettingsSecurityImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsGeneralRoute = SettingsGeneralImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsConnectionsRoute = SettingsConnectionsImport.update({
  id: '/connections',
  path: '/connections',
  getParentRoute: () => SettingsRoute,
} as any)

const PoliciesTermsRoute = PoliciesTermsImport.update({
  id: '/policies/terms',
  path: '/policies/terms',
  getParentRoute: () => rootRoute,
} as any)

const PoliciesPrivacyRoute = PoliciesPrivacyImport.update({
  id: '/policies/privacy',
  path: '/policies/privacy',
  getParentRoute: () => rootRoute,
} as any)

const PoliciesFaqRoute = PoliciesFaqImport.update({
  id: '/policies/faq',
  path: '/policies/faq',
  getParentRoute: () => rootRoute,
} as any)

const EntertainmentMangaRoute = EntertainmentMangaImport.update({
  id: '/manga',
  path: '/manga',
  getParentRoute: () => EntertainmentRoute,
} as any)

const EntertainmentMangaIndexRoute = EntertainmentMangaIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EntertainmentMangaRoute,
} as any)

const EntertainmentMangaIdRoute = EntertainmentMangaIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => EntertainmentMangaRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/entertainment': {
      id: '/entertainment'
      path: '/entertainment'
      fullPath: '/entertainment'
      preLoaderRoute: typeof EntertainmentImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/entertainment/manga': {
      id: '/entertainment/manga'
      path: '/manga'
      fullPath: '/entertainment/manga'
      preLoaderRoute: typeof EntertainmentMangaImport
      parentRoute: typeof EntertainmentImport
    }
    '/policies/faq': {
      id: '/policies/faq'
      path: '/policies/faq'
      fullPath: '/policies/faq'
      preLoaderRoute: typeof PoliciesFaqImport
      parentRoute: typeof rootRoute
    }
    '/policies/privacy': {
      id: '/policies/privacy'
      path: '/policies/privacy'
      fullPath: '/policies/privacy'
      preLoaderRoute: typeof PoliciesPrivacyImport
      parentRoute: typeof rootRoute
    }
    '/policies/terms': {
      id: '/policies/terms'
      path: '/policies/terms'
      fullPath: '/policies/terms'
      preLoaderRoute: typeof PoliciesTermsImport
      parentRoute: typeof rootRoute
    }
    '/settings/connections': {
      id: '/settings/connections'
      path: '/connections'
      fullPath: '/settings/connections'
      preLoaderRoute: typeof SettingsConnectionsImport
      parentRoute: typeof SettingsImport
    }
    '/settings/general': {
      id: '/settings/general'
      path: '/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralImport
      parentRoute: typeof SettingsImport
    }
    '/settings/security': {
      id: '/settings/security'
      path: '/security'
      fullPath: '/settings/security'
      preLoaderRoute: typeof SettingsSecurityImport
      parentRoute: typeof SettingsImport
    }
    '/system/browsers': {
      id: '/system/browsers'
      path: '/system/browsers'
      fullPath: '/system/browsers'
      preLoaderRoute: typeof SystemBrowsersImport
      parentRoute: typeof rootRoute
    }
    '/notes/': {
      id: '/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesIndexImport
      parentRoute: typeof rootRoute
    }
    '/entertainment/manga/$id': {
      id: '/entertainment/manga/$id'
      path: '/$id'
      fullPath: '/entertainment/manga/$id'
      preLoaderRoute: typeof EntertainmentMangaIdImport
      parentRoute: typeof EntertainmentMangaImport
    }
    '/entertainment/manga/': {
      id: '/entertainment/manga/'
      path: '/'
      fullPath: '/entertainment/manga/'
      preLoaderRoute: typeof EntertainmentMangaIndexImport
      parentRoute: typeof EntertainmentMangaImport
    }
  }
}

// Create and export the route tree

interface EntertainmentMangaRouteChildren {
  EntertainmentMangaIdRoute: typeof EntertainmentMangaIdRoute
  EntertainmentMangaIndexRoute: typeof EntertainmentMangaIndexRoute
}

const EntertainmentMangaRouteChildren: EntertainmentMangaRouteChildren = {
  EntertainmentMangaIdRoute: EntertainmentMangaIdRoute,
  EntertainmentMangaIndexRoute: EntertainmentMangaIndexRoute,
}

const EntertainmentMangaRouteWithChildren =
  EntertainmentMangaRoute._addFileChildren(EntertainmentMangaRouteChildren)

interface EntertainmentRouteChildren {
  EntertainmentMangaRoute: typeof EntertainmentMangaRouteWithChildren
}

const EntertainmentRouteChildren: EntertainmentRouteChildren = {
  EntertainmentMangaRoute: EntertainmentMangaRouteWithChildren,
}

const EntertainmentRouteWithChildren = EntertainmentRoute._addFileChildren(
  EntertainmentRouteChildren,
)

interface SettingsRouteChildren {
  SettingsConnectionsRoute: typeof SettingsConnectionsRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
  SettingsSecurityRoute: typeof SettingsSecurityRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsConnectionsRoute: SettingsConnectionsRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
  SettingsSecurityRoute: SettingsSecurityRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/entertainment': typeof EntertainmentRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRouteWithChildren
  '/entertainment/manga': typeof EntertainmentMangaRouteWithChildren
  '/policies/faq': typeof PoliciesFaqRoute
  '/policies/privacy': typeof PoliciesPrivacyRoute
  '/policies/terms': typeof PoliciesTermsRoute
  '/settings/connections': typeof SettingsConnectionsRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/security': typeof SettingsSecurityRoute
  '/system/browsers': typeof SystemBrowsersRoute
  '/notes': typeof NotesIndexRoute
  '/entertainment/manga/$id': typeof EntertainmentMangaIdRoute
  '/entertainment/manga/': typeof EntertainmentMangaIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/entertainment': typeof EntertainmentRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRouteWithChildren
  '/policies/faq': typeof PoliciesFaqRoute
  '/policies/privacy': typeof PoliciesPrivacyRoute
  '/policies/terms': typeof PoliciesTermsRoute
  '/settings/connections': typeof SettingsConnectionsRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/security': typeof SettingsSecurityRoute
  '/system/browsers': typeof SystemBrowsersRoute
  '/notes': typeof NotesIndexRoute
  '/entertainment/manga/$id': typeof EntertainmentMangaIdRoute
  '/entertainment/manga': typeof EntertainmentMangaIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/entertainment': typeof EntertainmentRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRouteWithChildren
  '/entertainment/manga': typeof EntertainmentMangaRouteWithChildren
  '/policies/faq': typeof PoliciesFaqRoute
  '/policies/privacy': typeof PoliciesPrivacyRoute
  '/policies/terms': typeof PoliciesTermsRoute
  '/settings/connections': typeof SettingsConnectionsRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/security': typeof SettingsSecurityRoute
  '/system/browsers': typeof SystemBrowsersRoute
  '/notes/': typeof NotesIndexRoute
  '/entertainment/manga/$id': typeof EntertainmentMangaIdRoute
  '/entertainment/manga/': typeof EntertainmentMangaIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/entertainment'
    | '/login'
    | '/register'
    | '/settings'
    | '/entertainment/manga'
    | '/policies/faq'
    | '/policies/privacy'
    | '/policies/terms'
    | '/settings/connections'
    | '/settings/general'
    | '/settings/security'
    | '/system/browsers'
    | '/notes'
    | '/entertainment/manga/$id'
    | '/entertainment/manga/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/entertainment'
    | '/login'
    | '/register'
    | '/settings'
    | '/policies/faq'
    | '/policies/privacy'
    | '/policies/terms'
    | '/settings/connections'
    | '/settings/general'
    | '/settings/security'
    | '/system/browsers'
    | '/notes'
    | '/entertainment/manga/$id'
    | '/entertainment/manga'
  id:
    | '__root__'
    | '/'
    | '/entertainment'
    | '/login'
    | '/register'
    | '/settings'
    | '/entertainment/manga'
    | '/policies/faq'
    | '/policies/privacy'
    | '/policies/terms'
    | '/settings/connections'
    | '/settings/general'
    | '/settings/security'
    | '/system/browsers'
    | '/notes/'
    | '/entertainment/manga/$id'
    | '/entertainment/manga/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EntertainmentRoute: typeof EntertainmentRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  PoliciesFaqRoute: typeof PoliciesFaqRoute
  PoliciesPrivacyRoute: typeof PoliciesPrivacyRoute
  PoliciesTermsRoute: typeof PoliciesTermsRoute
  SystemBrowsersRoute: typeof SystemBrowsersRoute
  NotesIndexRoute: typeof NotesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EntertainmentRoute: EntertainmentRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  SettingsRoute: SettingsRouteWithChildren,
  PoliciesFaqRoute: PoliciesFaqRoute,
  PoliciesPrivacyRoute: PoliciesPrivacyRoute,
  PoliciesTermsRoute: PoliciesTermsRoute,
  SystemBrowsersRoute: SystemBrowsersRoute,
  NotesIndexRoute: NotesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/entertainment",
        "/login",
        "/register",
        "/settings",
        "/policies/faq",
        "/policies/privacy",
        "/policies/terms",
        "/system/browsers",
        "/notes/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/entertainment": {
      "filePath": "entertainment.tsx",
      "children": [
        "/entertainment/manga"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx",
      "children": [
        "/settings/connections",
        "/settings/general",
        "/settings/security"
      ]
    },
    "/entertainment/manga": {
      "filePath": "entertainment/manga.tsx",
      "parent": "/entertainment",
      "children": [
        "/entertainment/manga/$id",
        "/entertainment/manga/"
      ]
    },
    "/policies/faq": {
      "filePath": "policies/faq.tsx"
    },
    "/policies/privacy": {
      "filePath": "policies/privacy.tsx"
    },
    "/policies/terms": {
      "filePath": "policies/terms.tsx"
    },
    "/settings/connections": {
      "filePath": "settings/connections.tsx",
      "parent": "/settings"
    },
    "/settings/general": {
      "filePath": "settings/general.tsx",
      "parent": "/settings"
    },
    "/settings/security": {
      "filePath": "settings/security.tsx",
      "parent": "/settings"
    },
    "/system/browsers": {
      "filePath": "system/browsers.tsx"
    },
    "/notes/": {
      "filePath": "notes/index.tsx"
    },
    "/entertainment/manga/$id": {
      "filePath": "entertainment/manga/$id.tsx",
      "parent": "/entertainment/manga"
    },
    "/entertainment/manga/": {
      "filePath": "entertainment/manga/index.tsx",
      "parent": "/entertainment/manga"
    }
  }
}
ROUTE_MANIFEST_END */
