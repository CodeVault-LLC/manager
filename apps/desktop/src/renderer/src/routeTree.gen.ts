/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VerifyEmailRouteImport } from './routes/verify-email'
import { Route as SystemRouteImport } from './routes/system'
import { Route as StatusRouteImport } from './routes/status'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as NotesRouteImport } from './routes/notes'
import { Route as LoginRouteImport } from './routes/login'
import { Route as EntertainmentRouteImport } from './routes/entertainment'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SystemIndexRouteImport } from './routes/system/index'
import { Route as NotesIndexRouteImport } from './routes/notes/index'
import { Route as SystemStorageRouteImport } from './routes/system/storage'
import { Route as SystemNetworkRouteImport } from './routes/system/network'
import { Route as SystemHardwareRouteImport } from './routes/system/hardware'
import { Route as SystemBrowsersRouteImport } from './routes/system/browsers'
import { Route as SettingsSecurityRouteImport } from './routes/settings/security'
import { Route as SettingsGeneralRouteImport } from './routes/settings/general'
import { Route as SettingsExtensionsRouteImport } from './routes/settings/extensions'
import { Route as SettingsConnectionsRouteImport } from './routes/settings/connections'
import { Route as PoliciesTermsRouteImport } from './routes/policies/terms'
import { Route as PoliciesPrivacyRouteImport } from './routes/policies/privacy'
import { Route as PoliciesFaqRouteImport } from './routes/policies/faq'
import { Route as NotesIdRouteImport } from './routes/notes/$id'
import { Route as EntertainmentMangaRouteImport } from './routes/entertainment/manga'
import { Route as DeveloperRmapRouteImport } from './routes/developer/rmap'
import { Route as DeveloperIconsRouteImport } from './routes/developer/icons'
import { Route as EntertainmentMangaIndexRouteImport } from './routes/entertainment/manga/index'
import { Route as EntertainmentMangaIdRouteImport } from './routes/entertainment/manga/$id'

const VerifyEmailRoute = VerifyEmailRouteImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => rootRouteImport,
} as any)
const SystemRoute = SystemRouteImport.update({
  id: '/system',
  path: '/system',
  getParentRoute: () => rootRouteImport,
} as any)
const StatusRoute = StatusRouteImport.update({
  id: '/status',
  path: '/status',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesRoute = NotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const EntertainmentRoute = EntertainmentRouteImport.update({
  id: '/entertainment',
  path: '/entertainment',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SystemIndexRoute = SystemIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SystemRoute,
} as any)
const NotesIndexRoute = NotesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NotesRoute,
} as any)
const SystemStorageRoute = SystemStorageRouteImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => SystemRoute,
} as any)
const SystemNetworkRoute = SystemNetworkRouteImport.update({
  id: '/network',
  path: '/network',
  getParentRoute: () => SystemRoute,
} as any)
const SystemHardwareRoute = SystemHardwareRouteImport.update({
  id: '/hardware',
  path: '/hardware',
  getParentRoute: () => SystemRoute,
} as any)
const SystemBrowsersRoute = SystemBrowsersRouteImport.update({
  id: '/browsers',
  path: '/browsers',
  getParentRoute: () => SystemRoute,
} as any)
const SettingsSecurityRoute = SettingsSecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsGeneralRoute = SettingsGeneralRouteImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsExtensionsRoute = SettingsExtensionsRouteImport.update({
  id: '/extensions',
  path: '/extensions',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsConnectionsRoute = SettingsConnectionsRouteImport.update({
  id: '/connections',
  path: '/connections',
  getParentRoute: () => SettingsRoute,
} as any)
const PoliciesTermsRoute = PoliciesTermsRouteImport.update({
  id: '/policies/terms',
  path: '/policies/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PoliciesPrivacyRoute = PoliciesPrivacyRouteImport.update({
  id: '/policies/privacy',
  path: '/policies/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const PoliciesFaqRoute = PoliciesFaqRouteImport.update({
  id: '/policies/faq',
  path: '/policies/faq',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesIdRoute = NotesIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => NotesRoute,
} as any)
const EntertainmentMangaRoute = EntertainmentMangaRouteImport.update({
  id: '/manga',
  path: '/manga',
  getParentRoute: () => EntertainmentRoute,
} as any)
const DeveloperRmapRoute = DeveloperRmapRouteImport.update({
  id: '/developer/rmap',
  path: '/developer/rmap',
  getParentRoute: () => rootRouteImport,
} as any)
const DeveloperIconsRoute = DeveloperIconsRouteImport.update({
  id: '/developer/icons',
  path: '/developer/icons',
  getParentRoute: () => rootRouteImport,
} as any)
const EntertainmentMangaIndexRoute = EntertainmentMangaIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EntertainmentMangaRoute,
} as any)
const EntertainmentMangaIdRoute = EntertainmentMangaIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => EntertainmentMangaRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/entertainment': typeof EntertainmentRouteWithChildren
  '/login': typeof LoginRoute
  '/notes': typeof NotesRouteWithChildren
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRouteWithChildren
  '/status': typeof StatusRoute
  '/system': typeof SystemRouteWithChildren
  '/verify-email': typeof VerifyEmailRoute
  '/developer/icons': typeof DeveloperIconsRoute
  '/developer/rmap': typeof DeveloperRmapRoute
  '/entertainment/manga': typeof EntertainmentMangaRouteWithChildren
  '/notes/$id': typeof NotesIdRoute
  '/policies/faq': typeof PoliciesFaqRoute
  '/policies/privacy': typeof PoliciesPrivacyRoute
  '/policies/terms': typeof PoliciesTermsRoute
  '/settings/connections': typeof SettingsConnectionsRoute
  '/settings/extensions': typeof SettingsExtensionsRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/security': typeof SettingsSecurityRoute
  '/system/browsers': typeof SystemBrowsersRoute
  '/system/hardware': typeof SystemHardwareRoute
  '/system/network': typeof SystemNetworkRoute
  '/system/storage': typeof SystemStorageRoute
  '/notes/': typeof NotesIndexRoute
  '/system/': typeof SystemIndexRoute
  '/entertainment/manga/$id': typeof EntertainmentMangaIdRoute
  '/entertainment/manga/': typeof EntertainmentMangaIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/entertainment': typeof EntertainmentRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRouteWithChildren
  '/status': typeof StatusRoute
  '/verify-email': typeof VerifyEmailRoute
  '/developer/icons': typeof DeveloperIconsRoute
  '/developer/rmap': typeof DeveloperRmapRoute
  '/notes/$id': typeof NotesIdRoute
  '/policies/faq': typeof PoliciesFaqRoute
  '/policies/privacy': typeof PoliciesPrivacyRoute
  '/policies/terms': typeof PoliciesTermsRoute
  '/settings/connections': typeof SettingsConnectionsRoute
  '/settings/extensions': typeof SettingsExtensionsRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/security': typeof SettingsSecurityRoute
  '/system/browsers': typeof SystemBrowsersRoute
  '/system/hardware': typeof SystemHardwareRoute
  '/system/network': typeof SystemNetworkRoute
  '/system/storage': typeof SystemStorageRoute
  '/notes': typeof NotesIndexRoute
  '/system': typeof SystemIndexRoute
  '/entertainment/manga/$id': typeof EntertainmentMangaIdRoute
  '/entertainment/manga': typeof EntertainmentMangaIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/entertainment': typeof EntertainmentRouteWithChildren
  '/login': typeof LoginRoute
  '/notes': typeof NotesRouteWithChildren
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRouteWithChildren
  '/status': typeof StatusRoute
  '/system': typeof SystemRouteWithChildren
  '/verify-email': typeof VerifyEmailRoute
  '/developer/icons': typeof DeveloperIconsRoute
  '/developer/rmap': typeof DeveloperRmapRoute
  '/entertainment/manga': typeof EntertainmentMangaRouteWithChildren
  '/notes/$id': typeof NotesIdRoute
  '/policies/faq': typeof PoliciesFaqRoute
  '/policies/privacy': typeof PoliciesPrivacyRoute
  '/policies/terms': typeof PoliciesTermsRoute
  '/settings/connections': typeof SettingsConnectionsRoute
  '/settings/extensions': typeof SettingsExtensionsRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/security': typeof SettingsSecurityRoute
  '/system/browsers': typeof SystemBrowsersRoute
  '/system/hardware': typeof SystemHardwareRoute
  '/system/network': typeof SystemNetworkRoute
  '/system/storage': typeof SystemStorageRoute
  '/notes/': typeof NotesIndexRoute
  '/system/': typeof SystemIndexRoute
  '/entertainment/manga/$id': typeof EntertainmentMangaIdRoute
  '/entertainment/manga/': typeof EntertainmentMangaIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/entertainment'
    | '/login'
    | '/notes'
    | '/register'
    | '/settings'
    | '/status'
    | '/system'
    | '/verify-email'
    | '/developer/icons'
    | '/developer/rmap'
    | '/entertainment/manga'
    | '/notes/$id'
    | '/policies/faq'
    | '/policies/privacy'
    | '/policies/terms'
    | '/settings/connections'
    | '/settings/extensions'
    | '/settings/general'
    | '/settings/security'
    | '/system/browsers'
    | '/system/hardware'
    | '/system/network'
    | '/system/storage'
    | '/notes/'
    | '/system/'
    | '/entertainment/manga/$id'
    | '/entertainment/manga/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/entertainment'
    | '/login'
    | '/register'
    | '/settings'
    | '/status'
    | '/verify-email'
    | '/developer/icons'
    | '/developer/rmap'
    | '/notes/$id'
    | '/policies/faq'
    | '/policies/privacy'
    | '/policies/terms'
    | '/settings/connections'
    | '/settings/extensions'
    | '/settings/general'
    | '/settings/security'
    | '/system/browsers'
    | '/system/hardware'
    | '/system/network'
    | '/system/storage'
    | '/notes'
    | '/system'
    | '/entertainment/manga/$id'
    | '/entertainment/manga'
  id:
    | '__root__'
    | '/'
    | '/entertainment'
    | '/login'
    | '/notes'
    | '/register'
    | '/settings'
    | '/status'
    | '/system'
    | '/verify-email'
    | '/developer/icons'
    | '/developer/rmap'
    | '/entertainment/manga'
    | '/notes/$id'
    | '/policies/faq'
    | '/policies/privacy'
    | '/policies/terms'
    | '/settings/connections'
    | '/settings/extensions'
    | '/settings/general'
    | '/settings/security'
    | '/system/browsers'
    | '/system/hardware'
    | '/system/network'
    | '/system/storage'
    | '/notes/'
    | '/system/'
    | '/entertainment/manga/$id'
    | '/entertainment/manga/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EntertainmentRoute: typeof EntertainmentRouteWithChildren
  LoginRoute: typeof LoginRoute
  NotesRoute: typeof NotesRouteWithChildren
  RegisterRoute: typeof RegisterRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  StatusRoute: typeof StatusRoute
  SystemRoute: typeof SystemRouteWithChildren
  VerifyEmailRoute: typeof VerifyEmailRoute
  DeveloperIconsRoute: typeof DeveloperIconsRoute
  DeveloperRmapRoute: typeof DeveloperRmapRoute
  PoliciesFaqRoute: typeof PoliciesFaqRoute
  PoliciesPrivacyRoute: typeof PoliciesPrivacyRoute
  PoliciesTermsRoute: typeof PoliciesTermsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/verify-email': {
      id: '/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof VerifyEmailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/system': {
      id: '/system'
      path: '/system'
      fullPath: '/system'
      preLoaderRoute: typeof SystemRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/status': {
      id: '/status'
      path: '/status'
      fullPath: '/status'
      preLoaderRoute: typeof StatusRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes': {
      id: '/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/entertainment': {
      id: '/entertainment'
      path: '/entertainment'
      fullPath: '/entertainment'
      preLoaderRoute: typeof EntertainmentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/system/': {
      id: '/system/'
      path: '/'
      fullPath: '/system/'
      preLoaderRoute: typeof SystemIndexRouteImport
      parentRoute: typeof SystemRoute
    }
    '/notes/': {
      id: '/notes/'
      path: '/'
      fullPath: '/notes/'
      preLoaderRoute: typeof NotesIndexRouteImport
      parentRoute: typeof NotesRoute
    }
    '/system/storage': {
      id: '/system/storage'
      path: '/storage'
      fullPath: '/system/storage'
      preLoaderRoute: typeof SystemStorageRouteImport
      parentRoute: typeof SystemRoute
    }
    '/system/network': {
      id: '/system/network'
      path: '/network'
      fullPath: '/system/network'
      preLoaderRoute: typeof SystemNetworkRouteImport
      parentRoute: typeof SystemRoute
    }
    '/system/hardware': {
      id: '/system/hardware'
      path: '/hardware'
      fullPath: '/system/hardware'
      preLoaderRoute: typeof SystemHardwareRouteImport
      parentRoute: typeof SystemRoute
    }
    '/system/browsers': {
      id: '/system/browsers'
      path: '/browsers'
      fullPath: '/system/browsers'
      preLoaderRoute: typeof SystemBrowsersRouteImport
      parentRoute: typeof SystemRoute
    }
    '/settings/security': {
      id: '/settings/security'
      path: '/security'
      fullPath: '/settings/security'
      preLoaderRoute: typeof SettingsSecurityRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/general': {
      id: '/settings/general'
      path: '/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/extensions': {
      id: '/settings/extensions'
      path: '/extensions'
      fullPath: '/settings/extensions'
      preLoaderRoute: typeof SettingsExtensionsRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/connections': {
      id: '/settings/connections'
      path: '/connections'
      fullPath: '/settings/connections'
      preLoaderRoute: typeof SettingsConnectionsRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/policies/terms': {
      id: '/policies/terms'
      path: '/policies/terms'
      fullPath: '/policies/terms'
      preLoaderRoute: typeof PoliciesTermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/policies/privacy': {
      id: '/policies/privacy'
      path: '/policies/privacy'
      fullPath: '/policies/privacy'
      preLoaderRoute: typeof PoliciesPrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/policies/faq': {
      id: '/policies/faq'
      path: '/policies/faq'
      fullPath: '/policies/faq'
      preLoaderRoute: typeof PoliciesFaqRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/$id': {
      id: '/notes/$id'
      path: '/$id'
      fullPath: '/notes/$id'
      preLoaderRoute: typeof NotesIdRouteImport
      parentRoute: typeof NotesRoute
    }
    '/entertainment/manga': {
      id: '/entertainment/manga'
      path: '/manga'
      fullPath: '/entertainment/manga'
      preLoaderRoute: typeof EntertainmentMangaRouteImport
      parentRoute: typeof EntertainmentRoute
    }
    '/developer/rmap': {
      id: '/developer/rmap'
      path: '/developer/rmap'
      fullPath: '/developer/rmap'
      preLoaderRoute: typeof DeveloperRmapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/developer/icons': {
      id: '/developer/icons'
      path: '/developer/icons'
      fullPath: '/developer/icons'
      preLoaderRoute: typeof DeveloperIconsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/entertainment/manga/': {
      id: '/entertainment/manga/'
      path: '/'
      fullPath: '/entertainment/manga/'
      preLoaderRoute: typeof EntertainmentMangaIndexRouteImport
      parentRoute: typeof EntertainmentMangaRoute
    }
    '/entertainment/manga/$id': {
      id: '/entertainment/manga/$id'
      path: '/$id'
      fullPath: '/entertainment/manga/$id'
      preLoaderRoute: typeof EntertainmentMangaIdRouteImport
      parentRoute: typeof EntertainmentMangaRoute
    }
  }
}

interface EntertainmentMangaRouteChildren {
  EntertainmentMangaIdRoute: typeof EntertainmentMangaIdRoute
  EntertainmentMangaIndexRoute: typeof EntertainmentMangaIndexRoute
}

const EntertainmentMangaRouteChildren: EntertainmentMangaRouteChildren = {
  EntertainmentMangaIdRoute: EntertainmentMangaIdRoute,
  EntertainmentMangaIndexRoute: EntertainmentMangaIndexRoute,
}

const EntertainmentMangaRouteWithChildren =
  EntertainmentMangaRoute._addFileChildren(EntertainmentMangaRouteChildren)

interface EntertainmentRouteChildren {
  EntertainmentMangaRoute: typeof EntertainmentMangaRouteWithChildren
}

const EntertainmentRouteChildren: EntertainmentRouteChildren = {
  EntertainmentMangaRoute: EntertainmentMangaRouteWithChildren,
}

const EntertainmentRouteWithChildren = EntertainmentRoute._addFileChildren(
  EntertainmentRouteChildren,
)

interface NotesRouteChildren {
  NotesIdRoute: typeof NotesIdRoute
  NotesIndexRoute: typeof NotesIndexRoute
}

const NotesRouteChildren: NotesRouteChildren = {
  NotesIdRoute: NotesIdRoute,
  NotesIndexRoute: NotesIndexRoute,
}

const NotesRouteWithChildren = NotesRoute._addFileChildren(NotesRouteChildren)

interface SettingsRouteChildren {
  SettingsConnectionsRoute: typeof SettingsConnectionsRoute
  SettingsExtensionsRoute: typeof SettingsExtensionsRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
  SettingsSecurityRoute: typeof SettingsSecurityRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsConnectionsRoute: SettingsConnectionsRoute,
  SettingsExtensionsRoute: SettingsExtensionsRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
  SettingsSecurityRoute: SettingsSecurityRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

interface SystemRouteChildren {
  SystemBrowsersRoute: typeof SystemBrowsersRoute
  SystemHardwareRoute: typeof SystemHardwareRoute
  SystemNetworkRoute: typeof SystemNetworkRoute
  SystemStorageRoute: typeof SystemStorageRoute
  SystemIndexRoute: typeof SystemIndexRoute
}

const SystemRouteChildren: SystemRouteChildren = {
  SystemBrowsersRoute: SystemBrowsersRoute,
  SystemHardwareRoute: SystemHardwareRoute,
  SystemNetworkRoute: SystemNetworkRoute,
  SystemStorageRoute: SystemStorageRoute,
  SystemIndexRoute: SystemIndexRoute,
}

const SystemRouteWithChildren =
  SystemRoute._addFileChildren(SystemRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EntertainmentRoute: EntertainmentRouteWithChildren,
  LoginRoute: LoginRoute,
  NotesRoute: NotesRouteWithChildren,
  RegisterRoute: RegisterRoute,
  SettingsRoute: SettingsRouteWithChildren,
  StatusRoute: StatusRoute,
  SystemRoute: SystemRouteWithChildren,
  VerifyEmailRoute: VerifyEmailRoute,
  DeveloperIconsRoute: DeveloperIconsRoute,
  DeveloperRmapRoute: DeveloperRmapRoute,
  PoliciesFaqRoute: PoliciesFaqRoute,
  PoliciesPrivacyRoute: PoliciesPrivacyRoute,
  PoliciesTermsRoute: PoliciesTermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
