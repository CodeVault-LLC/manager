// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.0
// source: system.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "system";

export interface OutputFormat {
  width: number;
  height: number;
  /** "png", "ico", "icns" */
  format: string;
  name: string;
}

export interface ConvertImageRequest {
  buffer: Uint8Array;
  outputs: OutputFormat[];
}

export interface ConvertImageResponse {
  buffer: Uint8Array;
  filename: string;
  mime: string;
}

function createBaseOutputFormat(): OutputFormat {
  return { width: 0, height: 0, format: "", name: "" };
}

export const OutputFormat: MessageFns<OutputFormat> = {
  encode(message: OutputFormat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.width !== 0) {
      writer.uint32(8).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    if (message.format !== "") {
      writer.uint32(26).string(message.format);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputFormat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputFormat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.format = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputFormat {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      format: isSet(object.format) ? globalThis.String(object.format) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: OutputFormat): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.format !== "") {
      obj.format = message.format;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutputFormat>, I>>(base?: I): OutputFormat {
    return OutputFormat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutputFormat>, I>>(object: I): OutputFormat {
    const message = createBaseOutputFormat();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.format = object.format ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseConvertImageRequest(): ConvertImageRequest {
  return { buffer: new Uint8Array(0), outputs: [] };
}

export const ConvertImageRequest: MessageFns<ConvertImageRequest> = {
  encode(message: ConvertImageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.buffer.length !== 0) {
      writer.uint32(10).bytes(message.buffer);
    }
    for (const v of message.outputs) {
      OutputFormat.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConvertImageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConvertImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.buffer = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.outputs.push(OutputFormat.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConvertImageRequest {
    return {
      buffer: isSet(object.buffer) ? bytesFromBase64(object.buffer) : new Uint8Array(0),
      outputs: globalThis.Array.isArray(object?.outputs)
        ? object.outputs.map((e: any) => OutputFormat.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ConvertImageRequest): unknown {
    const obj: any = {};
    if (message.buffer.length !== 0) {
      obj.buffer = base64FromBytes(message.buffer);
    }
    if (message.outputs?.length) {
      obj.outputs = message.outputs.map((e) => OutputFormat.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConvertImageRequest>, I>>(base?: I): ConvertImageRequest {
    return ConvertImageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConvertImageRequest>, I>>(object: I): ConvertImageRequest {
    const message = createBaseConvertImageRequest();
    message.buffer = object.buffer ?? new Uint8Array(0);
    message.outputs = object.outputs?.map((e) => OutputFormat.fromPartial(e)) || [];
    return message;
  },
};

function createBaseConvertImageResponse(): ConvertImageResponse {
  return { buffer: new Uint8Array(0), filename: "", mime: "" };
}

export const ConvertImageResponse: MessageFns<ConvertImageResponse> = {
  encode(message: ConvertImageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.buffer.length !== 0) {
      writer.uint32(10).bytes(message.buffer);
    }
    if (message.filename !== "") {
      writer.uint32(18).string(message.filename);
    }
    if (message.mime !== "") {
      writer.uint32(26).string(message.mime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConvertImageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConvertImageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.buffer = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mime = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConvertImageResponse {
    return {
      buffer: isSet(object.buffer) ? bytesFromBase64(object.buffer) : new Uint8Array(0),
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      mime: isSet(object.mime) ? globalThis.String(object.mime) : "",
    };
  },

  toJSON(message: ConvertImageResponse): unknown {
    const obj: any = {};
    if (message.buffer.length !== 0) {
      obj.buffer = base64FromBytes(message.buffer);
    }
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.mime !== "") {
      obj.mime = message.mime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConvertImageResponse>, I>>(base?: I): ConvertImageResponse {
    return ConvertImageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConvertImageResponse>, I>>(object: I): ConvertImageResponse {
    const message = createBaseConvertImageResponse();
    message.buffer = object.buffer ?? new Uint8Array(0);
    message.filename = object.filename ?? "";
    message.mime = object.mime ?? "";
    return message;
  },
};

export interface ImageConverter {
  ConvertImage(request: ConvertImageRequest): Promise<ConvertImageResponse>;
}

export const ImageConverterServiceName = "system.ImageConverter";
export class ImageConverterClientImpl implements ImageConverter {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ImageConverterServiceName;
    this.rpc = rpc;
    this.ConvertImage = this.ConvertImage.bind(this);
  }
  ConvertImage(request: ConvertImageRequest): Promise<ConvertImageResponse> {
    const data = ConvertImageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConvertImage", data);
    return promise.then((data) => ConvertImageResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
